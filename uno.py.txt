1. bruteForce(originalset[], n)

2.

3. Totalsubsets <-- 2^n

4. sumOfOriginalSet <-- 0

5.

6. for i <--0 to n

7. sumOfOriginalSet + = originalset[i]

8.

9. //base case

10. if(sumOfOriginalSet % 2 = 0)

11. half = sumOfOriginalSet/2

12. else

13. //The problem cannot be split into 2 equal partitions

14. //because we are dealing with whole numbers

15. //So we exit

16. return 0

17.

18. //iterates through all binary combinations by swapping the 1’s with

19. //corresponding element in the set

20. for i <-- 0 to Totalsubsets/2

21. subSetSum <--0

22. remainder <-- i

23. N <--0

24. while N<n

25. if remainder % 2 = 1

26. subSetSum + = originalset[N]

27. remainder = remainder/2

28. N++

29.

30. // if sum of a subset is equal to sum of the original set/2

31. // find its complement and perform XOR

32. if subSetSum = half

33. compliment <-- Totalsubsets-i-1

34. subSetSum <--0

35. remainder <-- i

36. N <--0

37. bool found <-- true;

38. while N<n

39. if(remainder%2 ^ compliment%2)

40. remainder = remainder/2

41. compliment=compliment/2

42. N++

43. else

44. found <-- false

45. break;

46. if found = true

47. return 1

48.

49. return 0;